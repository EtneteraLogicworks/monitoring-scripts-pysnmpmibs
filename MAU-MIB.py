#
# PySNMP MIB module MAU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/michal/.snmp/mibs/MAU-MIB
# Produced by pysmi-0.3.4 at Wed Dec  2 12:15:59 2020
# On host LogicAir.local platform Darwin version 19.6.0 by user michal
# Using Python version 3.8.5 (default, Sep  6 2020, 03:54:05) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, ModuleIdentity, ObjectIdentity, Counter32, mib_2, NotificationType, Unsigned32, Counter64, Integer32, IpAddress, Bits, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Counter32", "mib-2", "NotificationType", "Unsigned32", "Counter64", "Integer32", "IpAddress", "Bits", "TimeTicks", "Gauge32")
AutonomousType, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "DisplayString", "TextualConvention", "TruthValue")
mauMod = ModuleIdentity((1, 3, 6, 1, 2, 1, 26, 6))
mauMod.setRevisions(('2003-09-19 00:00', '1999-08-24 04:00', '1997-10-31 00:00', '1993-09-30 00:00',))
if mibBuilder.loadTexts: mauMod.setLastUpdated('200309190000Z')
if mibBuilder.loadTexts: mauMod.setOrganization('IETF Ethernet Interfaces and Hub MIB Working Group')
snmpDot3MauMgt = MibIdentifier((1, 3, 6, 1, 2, 1, 26))
class JackType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("other", 1), ("rj45", 2), ("rj45S", 3), ("db9", 4), ("bnc", 5), ("fAUI", 6), ("mAUI", 7), ("fiberSC", 8), ("fiberMIC", 9), ("fiberST", 10), ("telco", 11), ("mtrj", 12), ("hssdc", 13), ("fiberLC", 14))

dot3RpMauBasicGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 1))
dot3IfMauBasicGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 2))
dot3BroadMauBasicGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 3))
dot3IfMauAutoNegGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 5))
dot3MauType = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 4))
dot3MauTypeAUI = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 1))
if mibBuilder.loadTexts: dot3MauTypeAUI.setStatus('current')
dot3MauType10Base5 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 2))
if mibBuilder.loadTexts: dot3MauType10Base5.setStatus('current')
dot3MauTypeFoirl = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 3))
if mibBuilder.loadTexts: dot3MauTypeFoirl.setStatus('current')
dot3MauType10Base2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 4))
if mibBuilder.loadTexts: dot3MauType10Base2.setStatus('current')
dot3MauType10BaseT = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 5))
if mibBuilder.loadTexts: dot3MauType10BaseT.setStatus('current')
dot3MauType10BaseFP = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 6))
if mibBuilder.loadTexts: dot3MauType10BaseFP.setStatus('current')
dot3MauType10BaseFB = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 7))
if mibBuilder.loadTexts: dot3MauType10BaseFB.setStatus('current')
dot3MauType10BaseFL = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 8))
if mibBuilder.loadTexts: dot3MauType10BaseFL.setStatus('current')
dot3MauType10Broad36 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 9))
if mibBuilder.loadTexts: dot3MauType10Broad36.setStatus('current')
dot3MauType10BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 10))
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setStatus('current')
dot3MauType10BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 11))
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setStatus('current')
dot3MauType10BaseFLHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 12))
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setStatus('current')
dot3MauType10BaseFLFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 13))
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setStatus('current')
dot3MauType100BaseT4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 14))
if mibBuilder.loadTexts: dot3MauType100BaseT4.setStatus('current')
dot3MauType100BaseTXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 15))
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setStatus('current')
dot3MauType100BaseTXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 16))
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setStatus('current')
dot3MauType100BaseFXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 17))
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setStatus('current')
dot3MauType100BaseFXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 18))
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setStatus('current')
dot3MauType100BaseT2HD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 19))
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setStatus('current')
dot3MauType100BaseT2FD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 20))
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setStatus('current')
dot3MauType1000BaseXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 21))
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setStatus('current')
dot3MauType1000BaseXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 22))
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setStatus('current')
dot3MauType1000BaseLXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 23))
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setStatus('current')
dot3MauType1000BaseLXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 24))
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setStatus('current')
dot3MauType1000BaseSXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 25))
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setStatus('current')
dot3MauType1000BaseSXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 26))
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setStatus('current')
dot3MauType1000BaseCXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 27))
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setStatus('current')
dot3MauType1000BaseCXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 28))
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setStatus('current')
dot3MauType1000BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 29))
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setStatus('current')
dot3MauType1000BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 30))
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setStatus('current')
dot3MauType10GigBaseX = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 31))
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setStatus('current')
dot3MauType10GigBaseLX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 32))
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setStatus('current')
dot3MauType10GigBaseR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 33))
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setStatus('current')
dot3MauType10GigBaseER = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 34))
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setStatus('current')
dot3MauType10GigBaseLR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 35))
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setStatus('current')
dot3MauType10GigBaseSR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 36))
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setStatus('current')
dot3MauType10GigBaseW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 37))
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setStatus('current')
dot3MauType10GigBaseEW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 38))
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setStatus('current')
dot3MauType10GigBaseLW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 39))
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setStatus('current')
dot3MauType10GigBaseSW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 40))
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setStatus('current')
rpMauTable = MibTable((1, 3, 6, 1, 2, 1, 26, 1, 1), )
if mibBuilder.loadTexts: rpMauTable.setStatus('current')
rpMauEntry = MibTableRow((1, 3, 6, 1, 2, 1, 26, 1, 1, 1), ).setIndexNames((0, "MAU-MIB", "rpMauGroupIndex"), (0, "MAU-MIB", "rpMauPortIndex"), (0, "MAU-MIB", "rpMauIndex"))
if mibBuilder.loadTexts: rpMauEntry.setStatus('current')
rpMauGroupIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauGroupIndex.setStatus('current')
rpMauPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauPortIndex.setStatus('current')
rpMauIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauIndex.setStatus('current')
rpMauType = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauType.setStatus('current')
rpMauStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("operational", 3), ("standby", 4), ("shutdown", 5), ("reset", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpMauStatus.setStatus('current')
rpMauMediaAvailable = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("available", 3), ("notAvailable", 4), ("remoteFault", 5), ("invalidSignal", 6), ("remoteJabber", 7), ("remoteLinkLoss", 8), ("remoteTest", 9), ("offline", 10), ("autoNegError", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauMediaAvailable.setStatus('current')
rpMauMediaAvailableStateExits = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauMediaAvailableStateExits.setStatus('current')
rpMauJabberState = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noJabber", 3), ("jabbering", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauJabberState.setStatus('current')
rpMauJabberingStateEnters = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauJabberingStateEnters.setStatus('current')
rpMauFalseCarriers = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMauFalseCarriers.setStatus('current')
rpJackTable = MibTable((1, 3, 6, 1, 2, 1, 26, 1, 2), )
if mibBuilder.loadTexts: rpJackTable.setStatus('current')
rpJackEntry = MibTableRow((1, 3, 6, 1, 2, 1, 26, 1, 2, 1), ).setIndexNames((0, "MAU-MIB", "rpMauGroupIndex"), (0, "MAU-MIB", "rpMauPortIndex"), (0, "MAU-MIB", "rpMauIndex"), (0, "MAU-MIB", "rpJackIndex"))
if mibBuilder.loadTexts: rpJackEntry.setStatus('current')
rpJackIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rpJackIndex.setStatus('current')
rpJackType = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 1, 2, 1, 2), JackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpJackType.setStatus('current')
ifMauTable = MibTable((1, 3, 6, 1, 2, 1, 26, 2, 1), )
if mibBuilder.loadTexts: ifMauTable.setStatus('current')
ifMauEntry = MibTableRow((1, 3, 6, 1, 2, 1, 26, 2, 1, 1), ).setIndexNames((0, "MAU-MIB", "ifMauIfIndex"), (0, "MAU-MIB", "ifMauIndex"))
if mibBuilder.loadTexts: ifMauEntry.setStatus('current')
ifMauIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauIfIndex.setStatus('current')
ifMauIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauIndex.setStatus('current')
ifMauType = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauType.setStatus('current')
ifMauStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("operational", 3), ("standby", 4), ("shutdown", 5), ("reset", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMauStatus.setStatus('current')
ifMauMediaAvailable = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("available", 3), ("notAvailable", 4), ("remoteFault", 5), ("invalidSignal", 6), ("remoteJabber", 7), ("remoteLinkLoss", 8), ("remoteTest", 9), ("offline", 10), ("autoNegError", 11), ("pmdLinkFault", 12), ("wisFrameLoss", 13), ("wisSignalLoss", 14), ("pcsLinkFault", 15), ("excessiveBER", 16), ("dxsLinkFault", 17), ("pxsLinkFault", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauMediaAvailable.setStatus('current')
ifMauMediaAvailableStateExits = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauMediaAvailableStateExits.setStatus('current')
ifMauJabberState = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noJabber", 3), ("jabbering", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauJabberState.setStatus('current')
ifMauJabberingStateEnters = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauJabberingStateEnters.setStatus('current')
ifMauFalseCarriers = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauFalseCarriers.setStatus('current')
ifMauTypeList = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauTypeList.setStatus('deprecated')
ifMauDefaultType = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 11), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMauDefaultType.setStatus('current')
ifMauAutoNegSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegSupported.setStatus('current')
ifMauTypeListBits = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 13), Bits().clone(namedValues=NamedValues(("bOther", 0), ("bAUI", 1), ("b10base5", 2), ("bFoirl", 3), ("b10base2", 4), ("b10baseT", 5), ("b10baseFP", 6), ("b10baseFB", 7), ("b10baseFL", 8), ("b10broad36", 9), ("b10baseTHD", 10), ("b10baseTFD", 11), ("b10baseFLHD", 12), ("b10baseFLFD", 13), ("b100baseT4", 14), ("b100baseTXHD", 15), ("b100baseTXFD", 16), ("b100baseFXHD", 17), ("b100baseFXFD", 18), ("b100baseT2HD", 19), ("b100baseT2FD", 20), ("b1000baseXHD", 21), ("b1000baseXFD", 22), ("b1000baseLXHD", 23), ("b1000baseLXFD", 24), ("b1000baseSXHD", 25), ("b1000baseSXFD", 26), ("b1000baseCXHD", 27), ("b1000baseCXFD", 28), ("b1000baseTHD", 29), ("b1000baseTFD", 30), ("b10GbaseX", 31), ("b10GbaseLX4", 32), ("b10GbaseR", 33), ("b10GbaseER", 34), ("b10GbaseLR", 35), ("b10GbaseSR", 36), ("b10GbaseW", 37), ("b10GbaseEW", 38), ("b10GbaseLW", 39), ("b10GbaseSW", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauTypeListBits.setStatus('current')
ifMauHCFalseCarriers = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauHCFalseCarriers.setStatus('current')
ifJackTable = MibTable((1, 3, 6, 1, 2, 1, 26, 2, 2), )
if mibBuilder.loadTexts: ifJackTable.setStatus('current')
ifJackEntry = MibTableRow((1, 3, 6, 1, 2, 1, 26, 2, 2, 1), ).setIndexNames((0, "MAU-MIB", "ifMauIfIndex"), (0, "MAU-MIB", "ifMauIndex"), (0, "MAU-MIB", "ifJackIndex"))
if mibBuilder.loadTexts: ifJackEntry.setStatus('current')
ifJackIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ifJackIndex.setStatus('current')
ifJackType = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 2, 2, 1, 2), JackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifJackType.setStatus('current')
ifMauAutoNegTable = MibTable((1, 3, 6, 1, 2, 1, 26, 5, 1), )
if mibBuilder.loadTexts: ifMauAutoNegTable.setStatus('current')
ifMauAutoNegEntry = MibTableRow((1, 3, 6, 1, 2, 1, 26, 5, 1, 1), ).setIndexNames((0, "MAU-MIB", "ifMauIfIndex"), (0, "MAU-MIB", "ifMauIndex"))
if mibBuilder.loadTexts: ifMauAutoNegEntry.setStatus('current')
ifMauAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMauAutoNegAdminStatus.setStatus('current')
ifMauAutoNegRemoteSignaling = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("notdetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegRemoteSignaling.setStatus('current')
ifMauAutoNegConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("configuring", 2), ("complete", 3), ("disabled", 4), ("parallelDetectFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegConfig.setStatus('current')
ifMauAutoNegCapability = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegCapability.setStatus('deprecated')
ifMauAutoNegCapAdvertised = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMauAutoNegCapAdvertised.setStatus('deprecated')
ifMauAutoNegCapReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegCapReceived.setStatus('deprecated')
ifMauAutoNegRestart = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("norestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMauAutoNegRestart.setStatus('current')
ifMauAutoNegCapabilityBits = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 9), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bfdxPause", 8), ("bfdxAPause", 9), ("bfdxSPause", 10), ("bfdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegCapabilityBits.setStatus('current')
ifMauAutoNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 10), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMauAutoNegCapAdvertisedBits.setStatus('current')
ifMauAutoNegCapReceivedBits = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 11), Bits().clone(namedValues=NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegCapReceivedBits.setStatus('current')
ifMauAutoNegRemoteFaultAdvertised = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noError", 1), ("offline", 2), ("linkFailure", 3), ("autoNegError", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifMauAutoNegRemoteFaultAdvertised.setStatus('current')
ifMauAutoNegRemoteFaultReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noError", 1), ("offline", 2), ("linkFailure", 3), ("autoNegError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMauAutoNegRemoteFaultReceived.setStatus('current')
broadMauBasicTable = MibTable((1, 3, 6, 1, 2, 1, 26, 3, 1), )
if mibBuilder.loadTexts: broadMauBasicTable.setStatus('deprecated')
broadMauBasicEntry = MibTableRow((1, 3, 6, 1, 2, 1, 26, 3, 1, 1), ).setIndexNames((0, "MAU-MIB", "broadMauIfIndex"), (0, "MAU-MIB", "broadMauIndex"))
if mibBuilder.loadTexts: broadMauBasicEntry.setStatus('deprecated')
broadMauIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadMauIfIndex.setStatus('deprecated')
broadMauIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadMauIndex.setStatus('deprecated')
broadMauXmtRcvSplitType = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("single", 2), ("dual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadMauXmtRcvSplitType.setStatus('deprecated')
broadMauXmtCarrierFreq = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadMauXmtCarrierFreq.setStatus('deprecated')
broadMauTranslationFreq = MibTableColumn((1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadMauTranslationFreq.setStatus('deprecated')
snmpDot3MauTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 0))
rpMauJabberTrap = NotificationType((1, 3, 6, 1, 2, 1, 26, 0, 1)).setObjects(("MAU-MIB", "rpMauJabberState"))
if mibBuilder.loadTexts: rpMauJabberTrap.setStatus('current')
ifMauJabberTrap = NotificationType((1, 3, 6, 1, 2, 1, 26, 0, 2)).setObjects(("MAU-MIB", "ifMauJabberState"))
if mibBuilder.loadTexts: ifMauJabberTrap.setStatus('current')
mauModConf = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 6, 1))
mauModCompls = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 6, 1, 1))
mauModObjGrps = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 6, 1, 2))
mauModNotGrps = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 6, 1, 3))
mauRpGrpBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 1)).setObjects(("MAU-MIB", "rpMauGroupIndex"), ("MAU-MIB", "rpMauPortIndex"), ("MAU-MIB", "rpMauIndex"), ("MAU-MIB", "rpMauType"), ("MAU-MIB", "rpMauStatus"), ("MAU-MIB", "rpMauMediaAvailable"), ("MAU-MIB", "rpMauMediaAvailableStateExits"), ("MAU-MIB", "rpMauJabberState"), ("MAU-MIB", "rpMauJabberingStateEnters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauRpGrpBasic = mauRpGrpBasic.setStatus('current')
mauRpGrp100Mbs = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 2)).setObjects(("MAU-MIB", "rpMauFalseCarriers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauRpGrp100Mbs = mauRpGrp100Mbs.setStatus('current')
mauRpGrpJack = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 3)).setObjects(("MAU-MIB", "rpJackType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauRpGrpJack = mauRpGrpJack.setStatus('current')
mauIfGrpBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 4)).setObjects(("MAU-MIB", "ifMauIfIndex"), ("MAU-MIB", "ifMauIndex"), ("MAU-MIB", "ifMauType"), ("MAU-MIB", "ifMauStatus"), ("MAU-MIB", "ifMauMediaAvailable"), ("MAU-MIB", "ifMauMediaAvailableStateExits"), ("MAU-MIB", "ifMauJabberState"), ("MAU-MIB", "ifMauJabberingStateEnters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrpBasic = mauIfGrpBasic.setStatus('current')
mauIfGrp100Mbs = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 5)).setObjects(("MAU-MIB", "ifMauFalseCarriers"), ("MAU-MIB", "ifMauTypeList"), ("MAU-MIB", "ifMauDefaultType"), ("MAU-MIB", "ifMauAutoNegSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrp100Mbs = mauIfGrp100Mbs.setStatus('deprecated')
mauIfGrpJack = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 6)).setObjects(("MAU-MIB", "ifJackType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrpJack = mauIfGrpJack.setStatus('current')
mauIfGrpAutoNeg = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 7)).setObjects(("MAU-MIB", "ifMauAutoNegAdminStatus"), ("MAU-MIB", "ifMauAutoNegRemoteSignaling"), ("MAU-MIB", "ifMauAutoNegConfig"), ("MAU-MIB", "ifMauAutoNegCapability"), ("MAU-MIB", "ifMauAutoNegCapAdvertised"), ("MAU-MIB", "ifMauAutoNegCapReceived"), ("MAU-MIB", "ifMauAutoNegRestart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrpAutoNeg = mauIfGrpAutoNeg.setStatus('deprecated')
mauBroadBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 8)).setObjects(("MAU-MIB", "broadMauIfIndex"), ("MAU-MIB", "broadMauIndex"), ("MAU-MIB", "broadMauXmtRcvSplitType"), ("MAU-MIB", "broadMauXmtCarrierFreq"), ("MAU-MIB", "broadMauTranslationFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauBroadBasic = mauBroadBasic.setStatus('deprecated')
mauIfGrpHighCapacity = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 9)).setObjects(("MAU-MIB", "ifMauFalseCarriers"), ("MAU-MIB", "ifMauTypeListBits"), ("MAU-MIB", "ifMauDefaultType"), ("MAU-MIB", "ifMauAutoNegSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrpHighCapacity = mauIfGrpHighCapacity.setStatus('current')
mauIfGrpAutoNeg2 = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 10)).setObjects(("MAU-MIB", "ifMauAutoNegAdminStatus"), ("MAU-MIB", "ifMauAutoNegRemoteSignaling"), ("MAU-MIB", "ifMauAutoNegConfig"), ("MAU-MIB", "ifMauAutoNegCapabilityBits"), ("MAU-MIB", "ifMauAutoNegCapAdvertisedBits"), ("MAU-MIB", "ifMauAutoNegCapReceivedBits"), ("MAU-MIB", "ifMauAutoNegRestart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrpAutoNeg2 = mauIfGrpAutoNeg2.setStatus('current')
mauIfGrpAutoNeg1000Mbps = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 11)).setObjects(("MAU-MIB", "ifMauAutoNegRemoteFaultAdvertised"), ("MAU-MIB", "ifMauAutoNegRemoteFaultReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrpAutoNeg1000Mbps = mauIfGrpAutoNeg1000Mbps.setStatus('current')
mauIfGrpHCStats = ObjectGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 12)).setObjects(("MAU-MIB", "ifMauHCFalseCarriers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauIfGrpHCStats = mauIfGrpHCStats.setStatus('current')
rpMauNotifications = NotificationGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 3, 1)).setObjects(("MAU-MIB", "rpMauJabberTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rpMauNotifications = rpMauNotifications.setStatus('current')
ifMauNotifications = NotificationGroup((1, 3, 6, 1, 2, 1, 26, 6, 1, 3, 2)).setObjects(("MAU-MIB", "ifMauJabberTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ifMauNotifications = ifMauNotifications.setStatus('current')
mauModRpCompl = ModuleCompliance((1, 3, 6, 1, 2, 1, 26, 6, 1, 1, 1)).setObjects(("MAU-MIB", "mauRpGrpBasic"), ("MAU-MIB", "mauRpGrp100Mbs"), ("MAU-MIB", "mauRpGrpJack"), ("MAU-MIB", "rpMauNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauModRpCompl = mauModRpCompl.setStatus('deprecated')
mauModIfCompl = ModuleCompliance((1, 3, 6, 1, 2, 1, 26, 6, 1, 1, 2)).setObjects(("MAU-MIB", "mauIfGrpBasic"), ("MAU-MIB", "mauIfGrp100Mbs"), ("MAU-MIB", "mauIfGrpJack"), ("MAU-MIB", "mauIfGrpAutoNeg"), ("MAU-MIB", "mauBroadBasic"), ("MAU-MIB", "ifMauNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauModIfCompl = mauModIfCompl.setStatus('deprecated')
mauModIfCompl2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 26, 6, 1, 1, 3)).setObjects(("MAU-MIB", "mauIfGrpBasic"), ("MAU-MIB", "mauIfGrpHighCapacity"), ("MAU-MIB", "mauIfGrpJack"), ("MAU-MIB", "mauIfGrpAutoNeg2"), ("MAU-MIB", "mauIfGrpAutoNeg1000Mbps"), ("MAU-MIB", "ifMauNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauModIfCompl2 = mauModIfCompl2.setStatus('deprecated')
mauModRpCompl2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 26, 6, 1, 1, 4)).setObjects(("MAU-MIB", "mauRpGrpBasic"), ("MAU-MIB", "mauRpGrp100Mbs"), ("MAU-MIB", "mauRpGrpJack"), ("MAU-MIB", "rpMauNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauModRpCompl2 = mauModRpCompl2.setStatus('current')
mauModIfCompl3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 26, 6, 1, 1, 5)).setObjects(("MAU-MIB", "mauIfGrpBasic"), ("MAU-MIB", "mauIfGrpHighCapacity"), ("MAU-MIB", "mauIfGrpHCStats"), ("MAU-MIB", "mauIfGrpJack"), ("MAU-MIB", "mauIfGrpAutoNeg2"), ("MAU-MIB", "mauIfGrpAutoNeg1000Mbps"), ("MAU-MIB", "ifMauNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mauModIfCompl3 = mauModIfCompl3.setStatus('current')
mibBuilder.exportSymbols("MAU-MIB", ifJackEntry=ifJackEntry, ifMauAutoNegAdminStatus=ifMauAutoNegAdminStatus, mauIfGrpAutoNeg2=mauIfGrpAutoNeg2, ifMauStatus=ifMauStatus, mauModRpCompl=mauModRpCompl, broadMauXmtRcvSplitType=broadMauXmtRcvSplitType, ifMauJabberTrap=ifMauJabberTrap, mauIfGrpBasic=mauIfGrpBasic, ifMauFalseCarriers=ifMauFalseCarriers, ifMauAutoNegCapAdvertised=ifMauAutoNegCapAdvertised, dot3MauType10GigBaseLX4=dot3MauType10GigBaseLX4, dot3IfMauBasicGroup=dot3IfMauBasicGroup, dot3MauType10BaseTFD=dot3MauType10BaseTFD, ifMauAutoNegCapabilityBits=ifMauAutoNegCapabilityBits, dot3MauType10GigBaseW=dot3MauType10GigBaseW, dot3MauTypeFoirl=dot3MauTypeFoirl, rpMauIndex=rpMauIndex, mauRpGrpBasic=mauRpGrpBasic, mauIfGrpJack=mauIfGrpJack, ifMauEntry=ifMauEntry, mauModIfCompl2=mauModIfCompl2, broadMauXmtCarrierFreq=broadMauXmtCarrierFreq, mauRpGrpJack=mauRpGrpJack, dot3MauType1000BaseLXFD=dot3MauType1000BaseLXFD, mauModIfCompl3=mauModIfCompl3, broadMauIndex=broadMauIndex, dot3MauType1000BaseTHD=dot3MauType1000BaseTHD, ifJackIndex=ifJackIndex, broadMauTranslationFreq=broadMauTranslationFreq, dot3MauType10GigBaseEW=dot3MauType10GigBaseEW, ifMauTypeList=ifMauTypeList, ifJackTable=ifJackTable, dot3MauType10Base5=dot3MauType10Base5, dot3MauType100BaseFXFD=dot3MauType100BaseFXFD, JackType=JackType, dot3IfMauAutoNegGroup=dot3IfMauAutoNegGroup, dot3MauType100BaseTXFD=dot3MauType100BaseTXFD, dot3MauType1000BaseLXHD=dot3MauType1000BaseLXHD, ifMauJabberState=ifMauJabberState, dot3MauType10Base2=dot3MauType10Base2, rpJackType=rpJackType, rpJackEntry=rpJackEntry, dot3MauType10BaseT=dot3MauType10BaseT, rpMauPortIndex=rpMauPortIndex, dot3MauType1000BaseSXFD=dot3MauType1000BaseSXFD, rpMauMediaAvailableStateExits=rpMauMediaAvailableStateExits, ifMauAutoNegRemoteSignaling=ifMauAutoNegRemoteSignaling, ifMauType=ifMauType, ifMauTypeListBits=ifMauTypeListBits, rpMauJabberTrap=rpMauJabberTrap, ifMauMediaAvailable=ifMauMediaAvailable, dot3MauType100BaseT2HD=dot3MauType100BaseT2HD, dot3MauType100BaseT2FD=dot3MauType100BaseT2FD, dot3MauType100BaseTXHD=dot3MauType100BaseTXHD, mauModNotGrps=mauModNotGrps, ifMauIndex=ifMauIndex, mauBroadBasic=mauBroadBasic, ifMauIfIndex=ifMauIfIndex, snmpDot3MauMgt=snmpDot3MauMgt, broadMauIfIndex=broadMauIfIndex, mauIfGrpAutoNeg1000Mbps=mauIfGrpAutoNeg1000Mbps, dot3MauType=dot3MauType, dot3MauType10BaseFLHD=dot3MauType10BaseFLHD, broadMauBasicTable=broadMauBasicTable, rpMauFalseCarriers=rpMauFalseCarriers, dot3MauType10BaseFB=dot3MauType10BaseFB, dot3MauType1000BaseTFD=dot3MauType1000BaseTFD, mauMod=mauMod, ifJackType=ifJackType, ifMauAutoNegCapability=ifMauAutoNegCapability, dot3MauType10GigBaseR=dot3MauType10GigBaseR, mauModConf=mauModConf, dot3MauType10GigBaseLW=dot3MauType10GigBaseLW, dot3MauTypeAUI=dot3MauTypeAUI, dot3RpMauBasicGroup=dot3RpMauBasicGroup, dot3MauType10Broad36=dot3MauType10Broad36, rpMauType=rpMauType, mauIfGrpAutoNeg=mauIfGrpAutoNeg, mauModIfCompl=mauModIfCompl, ifMauMediaAvailableStateExits=ifMauMediaAvailableStateExits, ifMauAutoNegCapReceivedBits=ifMauAutoNegCapReceivedBits, rpMauJabberState=rpMauJabberState, ifMauAutoNegRemoteFaultAdvertised=ifMauAutoNegRemoteFaultAdvertised, dot3MauType10BaseTHD=dot3MauType10BaseTHD, dot3MauType10GigBaseSR=dot3MauType10GigBaseSR, dot3MauType10GigBaseSW=dot3MauType10GigBaseSW, ifMauAutoNegSupported=ifMauAutoNegSupported, rpMauGroupIndex=rpMauGroupIndex, rpMauTable=rpMauTable, rpMauMediaAvailable=rpMauMediaAvailable, rpMauJabberingStateEnters=rpMauJabberingStateEnters, ifMauAutoNegCapAdvertisedBits=ifMauAutoNegCapAdvertisedBits, dot3MauType100BaseT4=dot3MauType100BaseT4, rpJackTable=rpJackTable, ifMauNotifications=ifMauNotifications, dot3MauType1000BaseCXHD=dot3MauType1000BaseCXHD, mauIfGrpHighCapacity=mauIfGrpHighCapacity, dot3MauType10BaseFL=dot3MauType10BaseFL, dot3MauType1000BaseCXFD=dot3MauType1000BaseCXFD, dot3MauType1000BaseSXHD=dot3MauType1000BaseSXHD, rpMauStatus=rpMauStatus, dot3MauType10BaseFP=dot3MauType10BaseFP, mauModObjGrps=mauModObjGrps, ifMauTable=ifMauTable, dot3MauType10GigBaseLR=dot3MauType10GigBaseLR, ifMauAutoNegRemoteFaultReceived=ifMauAutoNegRemoteFaultReceived, ifMauAutoNegEntry=ifMauAutoNegEntry, rpMauEntry=rpMauEntry, ifMauAutoNegTable=ifMauAutoNegTable, ifMauJabberingStateEnters=ifMauJabberingStateEnters, dot3MauType1000BaseXFD=dot3MauType1000BaseXFD, ifMauHCFalseCarriers=ifMauHCFalseCarriers, ifMauAutoNegCapReceived=ifMauAutoNegCapReceived, snmpDot3MauTraps=snmpDot3MauTraps, rpJackIndex=rpJackIndex, dot3MauType1000BaseXHD=dot3MauType1000BaseXHD, mauIfGrpHCStats=mauIfGrpHCStats, broadMauBasicEntry=broadMauBasicEntry, mauModRpCompl2=mauModRpCompl2, dot3MauType100BaseFXHD=dot3MauType100BaseFXHD, dot3MauType10BaseFLFD=dot3MauType10BaseFLFD, PYSNMP_MODULE_ID=mauMod, dot3BroadMauBasicGroup=dot3BroadMauBasicGroup, mauRpGrp100Mbs=mauRpGrp100Mbs, ifMauDefaultType=ifMauDefaultType, ifMauAutoNegRestart=ifMauAutoNegRestart, mauIfGrp100Mbs=mauIfGrp100Mbs, rpMauNotifications=rpMauNotifications, dot3MauType10GigBaseER=dot3MauType10GigBaseER, dot3MauType10GigBaseX=dot3MauType10GigBaseX, mauModCompls=mauModCompls, ifMauAutoNegConfig=ifMauAutoNegConfig)
