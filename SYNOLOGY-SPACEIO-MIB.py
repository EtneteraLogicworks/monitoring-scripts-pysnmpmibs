#
# PySNMP MIB module SYNOLOGY-SPACEIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/michal/.snmp/mibs/SYNOLOGY-SPACEIO-MIB.txt
# Produced by pysmi-0.3.4 at Thu Apr 23 12:02:04 2020
# On host LogicAir-MacBookAir.local platform Darwin version 19.4.0 by user michal
# Using Python version 3.7.3 (default, Mar  6 2020, 22:34:30) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Integer32, NotificationType, Gauge32, MibIdentifier, Bits, Unsigned32, IpAddress, ObjectIdentity, Counter64, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Integer32", "NotificationType", "Gauge32", "MibIdentifier", "Bits", "Unsigned32", "IpAddress", "ObjectIdentity", "Counter64", "Counter32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
spaceIO = ModuleIdentity((1, 3, 6, 1, 4, 1, 6574, 102))
spaceIO.setRevisions(('2013-09-11 00:00',))
if mibBuilder.loadTexts: spaceIO.setLastUpdated('201309110000Z')
if mibBuilder.loadTexts: spaceIO.setOrganization('www.synology.com')
synology = MibIdentifier((1, 3, 6, 1, 4, 1, 6574))
spaceIOTable = MibTable((1, 3, 6, 1, 4, 1, 6574, 102, 1), )
if mibBuilder.loadTexts: spaceIOTable.setStatus('current')
spaceIOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1), ).setIndexNames((0, "SYNOLOGY-SPACEIO-MIB", "spaceIOIndex"))
if mibBuilder.loadTexts: spaceIOEntry.setStatus('current')
spaceIOIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: spaceIOIndex.setStatus('current')
spaceIODevice = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIODevice.setStatus('current')
spaceIONRead = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONRead.setStatus('current')
spaceIONWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONWritten.setStatus('current')
spaceIOReads = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOReads.setStatus('current')
spaceIOWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOWrites.setStatus('current')
spaceIOLA = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA.setStatus('current')
spaceIOLA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA1.setStatus('current')
spaceIOLA5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA5.setStatus('current')
spaceIOLA15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIOLA15.setStatus('current')
spaceIONReadX = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONReadX.setStatus('current')
spaceIONWrittenX = MibTableColumn((1, 3, 6, 1, 4, 1, 6574, 102, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spaceIONWrittenX.setStatus('current')
spaceIOConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 102, 2))
spaceIOCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 102, 2, 1))
spaceIOGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6574, 102, 2, 2))
spaceIOCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6574, 102, 2, 1, 1)).setObjects(("SYNOLOGY-SPACEIO-MIB", "spaceIOGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spaceIOCompliance = spaceIOCompliance.setStatus('current')
spaceIOGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6574, 102, 2, 2, 1)).setObjects(("SYNOLOGY-SPACEIO-MIB", "spaceIODevice"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONRead"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONWritten"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOReads"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOWrites"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA1"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA5"), ("SYNOLOGY-SPACEIO-MIB", "spaceIOLA15"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONReadX"), ("SYNOLOGY-SPACEIO-MIB", "spaceIONWrittenX"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spaceIOGroup = spaceIOGroup.setStatus('current')
mibBuilder.exportSymbols("SYNOLOGY-SPACEIO-MIB", spaceIOCompliances=spaceIOCompliances, spaceIOEntry=spaceIOEntry, spaceIONRead=spaceIONRead, PYSNMP_MODULE_ID=spaceIO, spaceIOLA1=spaceIOLA1, spaceIONWrittenX=spaceIONWrittenX, spaceIOGroups=spaceIOGroups, synology=synology, spaceIOLA=spaceIOLA, spaceIOGroup=spaceIOGroup, spaceIOWrites=spaceIOWrites, spaceIODevice=spaceIODevice, spaceIOLA15=spaceIOLA15, spaceIOCompliance=spaceIOCompliance, spaceIO=spaceIO, spaceIONWritten=spaceIONWritten, spaceIOConformance=spaceIOConformance, spaceIOLA5=spaceIOLA5, spaceIOReads=spaceIOReads, spaceIOTable=spaceIOTable, spaceIOIndex=spaceIOIndex, spaceIONReadX=spaceIONReadX)
